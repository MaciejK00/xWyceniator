import com.example.demo.entity.Land;
import com.example.demo.common.SurroundingsEnum;
import java.util.List;
import java.util.Arrays;
import java.util.List;

global com.example.demo.prices.SurroundingsPrice surroundingsPrice;

declare SurroundingsPriceFact
    surroundingsList : List
    price : double
end

rule "Define Surroundings Prices"
    no-loop
    when
        not SurroundingsPriceFact()
    then
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.EXPRESS.getName()), 10000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.HIGHWAY.getName()), 20000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.TARMAC.getName()), 5000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.EXPRESS.getName(), SurroundingsEnum.HIGHWAY.getName()), 30000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.EXPRESS.getName(), SurroundingsEnum.TARMAC.getName()), 15000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.HIGHWAY.getName(), SurroundingsEnum.TARMAC.getName()), 25000.0));
        insert(new SurroundingsPriceFact(Arrays.asList(SurroundingsEnum.EXPRESS.getName(), SurroundingsEnum.HIGHWAY.getName(), SurroundingsEnum.TARMAC.getName()), 35000.0));
end

rule "Set Surroundings Price"
    when
        $land : Land($surroundings : surroundings)
        $priceFact : SurroundingsPriceFact($surroundingsList : surroundingsList)
        eval($surroundings.containsAll($surroundingsList) && $surroundingsList.containsAll($surroundings))
    then
        surroundingsPrice.setPrice($priceFact.getPrice());
end
